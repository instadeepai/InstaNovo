# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

# Workflow name
# If you change this name, also update the name in the docs.yml workflow
name: Test, Lint, and Update Coverage Badge

# Triggers for the workflow
on:
  push:
    branches: ["main"] # Run on pushes to the main branch
  pull_request:
    branches: ["main"] # Run on pull requests targeting the main branch

# Concurrency control
concurrency:
  # Group runs by workflow name and the Git ref (branch or tag)
  # Ensures only one run proceeds for the same workflow and ref at a time
  group: ${{ github.workflow }}-${{ github.ref }}
  # Cancel any ongoing runs for the same group (workflow + ref) when a new run starts
  cancel-in-progress: true

# Define the jobs to run
jobs:
  build:
    # Define permissions needed for the job
    permissions:
      contents: write # Allow writing repository content (for committing the badge)
      pull-requests: read # Allow reading pull request details

    # Define the strategy for running jobs in parallel
    strategy:
      fail-fast: false # Don't cancel other jobs if one fails
      matrix:
        # Define the matrix combinations
        python-version: ["3.10", "3.11", "3.12"] # Python versions to test
        os: [ubuntu-latest] # Operating systems to test on

    # Specify the runner environment for the job
    runs-on: ${{ matrix.os }}

    # Define the steps within the job
    steps:
      # Step 1: Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Install uv and set up Python
      - name: Install uv and set up Python ${{ matrix.python-version }} on ${{ matrix.os }}
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true # Enable caching for faster builds
          pyproject-file: "pyproject.toml" # Specify the pyproject.toml file
          python-version: ${{ matrix.python-version }} # Use Python version from matrix

      # Step 3: Install project dependencies
      - name: Install dependencies
        run: uv sync --extra cpu --dev # Install main and dev dependencies, CI runs on 'cpu' only

      # Step 4: Lint code with pre-commit
      - name: Lint with pre-commit
        run: uv run pre-commit run --all-files -c .pre-commit-config.yaml # Run all pre-commit hooks

      # Step 5: Run tests with pytest and generate coverage report
      - name: Test with pytest
        run: |
          # Run a script (example, adjust if needed)
          uv run python -m instanovo.scripts.get_zenodo_record

          # Run pytest with coverage, allure report, and random order
          # Output coverage data needed for badge generation
          uv run --frozen pytest -v --alluredir=allure_results --cov --cov-report=html --random-order

          # Generate coverage summary text file for the badge action
          coverage report -m --fail-under=0
        # Note: --fail-under=0 prevents this step from failing due to low coverage,
        # allowing the badge to be generated. Consider adding a separate step
        # later in the workflow to enforce a minimum coverage threshold if desired.

      # Step 6: Generate coverage badge (only for Python 3.12 on Ubuntu)
      - name: Generate coverage badge
        # Only run this step for a specific matrix combination to avoid multiple badge generations
        if: matrix.python-version == '3.12' && matrix.os == 'ubuntu-latest'
        uses: tj-actions/coverage-badge-py@v2 # Use the coverage badge action
        with:
          output: ./docs/assets/coverage.svg # Output badge file name

      # Step 7: Commit coverage badge (only on push to main for Python 3.12 on Ubuntu)
      - name: Commit coverage badge
        # Only run this step on pushes to main for the specific matrix combination
        if:
          github.event_name == 'push' && matrix.python-version == '3.12' && matrix.os ==
          'ubuntu-latest'
        uses: stefanzweifel/git-auto-commit-action@v5 # Use the auto-commit action
        with:
          commit_message: "chore: update coverage badge [skip ci]" # Commit message
          file_pattern: ./docs/assets/coverage.svg # Pattern of files to commit
          add_options: "-f" # Force add coverage badge file
          commit_options: "--no-verify" # Skip pre-commit hooks for this commit
          repository: . # Commit to the current repository
          commit_user_name: github-actions[bot]
          commit_user_email: github-actions[bot]@users.noreply.github.com
          commit_author: github-actions[bot] <github-actions[bot]@users.noreply.github.com>

      # Step 8: Test notebooks on Linux (conditional)
      - name: Test notebooks on Linux
        if: runner.os != 'Windows' # Only run if the OS is not Windows
        run: |
          # Modify notebook to only run on 10 samples to speedup test
          sed -i 's/test\[:10%\]/test[:10]/g' notebooks/getting_started_with_instanovo.ipynb
          # Install ipykernel
          PYDEVD_DISABLE_FILE_VALIDATION=1 python -m ipykernel install --user --name instanovo
          # Run notebook tests with nbmake
          uv run --frozen pytest --nbmake "./notebooks/getting_started_with_instanovo.ipynb" --nbmake-kernel=instanovo --nbmake-timeout=10000

      # Step 9: Test notebooks on Windows (conditional)
      - name: Test notebooks on Windows
        if: runner.os == 'Windows' # Only run if the OS is Windows
        run: |
          # Set environment variable and install ipykernel
          $env:PYDEVD_DISABLE_FILE_VALIDATION=1; python -m ipykernel install --user --name instanovo
          # Run notebook tests with nbmake
          uv run --frozen pytest --nbmake "./notebooks/getting_started_with_instanovo.ipynb" --nbmake-kernel=instanovo --nbmake-timeout=10000
